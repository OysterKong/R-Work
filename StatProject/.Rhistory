a <- c(980, 1008, 968, 1032, 1012, 1002, 996, 1017, 990, 955)
mean.a <- mean(a)
mean.a
t-test(a, mu=1000)
t.test(a, mu=1000)
t.test(a, mu=1000, alt="less")
t.test(a, mu=1000, alt="greater")
t.test(a, mu=1000, alt="two.sided")
##### independent two sample t-test #####
install.packages("moonbook")
##### independent two sample t-test #####
install.packages("moonBook")
library(moonBook)
?acs
head(acs)
str(acs)
summary(acs)
mean.man <- mean(acs$age[acs$sex=="Male"])
mean.man
mean.woman <- mean(acs$age[acs$sex=="Female"])
mean.woman
cat(mean.man, mean.woman)
### 정규분포 테스트
manBook::densityplot(age ~ sex, data,acs)
### 정규분포 테스트
moonBook::densityplot(age ~ sex, data,acs)
### 정규분포 테스트
moonBook::densityplot(age ~ sex, data=acs)
shapiro.test(acs$age[acs$sex=="Male"])
shapiro.test(acs$age[acs$sex=="Female"])
var.test(age ~ sex, data=acs)
# MWW
wilcox.test(age ~ sex, data=acs)
# t-test
t.test(age ~ sex, data=acs, alt="two.sided", var.equal=T)
# welch's test
t.test(age ~ sex, data=acs, alt="two.sided", var.equal=F)   # t-test에서 var.equal을 F로 바꿔주면 welch's test
str(sleep)
sleep
moonBook::densityplot(extra ~ group, data=acs)
moonBook::densityplot(extra ~ group, data=sleep)
shapiro.test(sleep$extra[sleep$extra=="group1"])
shapiro.test(sleep$extra[sleep$extra=="group"])
shapiro.test(sleep$extra[sleep$extra==1])
shapiro.test(sleep$extra[sleep$group==1])
shapiro.test(sleep$extra[sleep$group==2])
# 등분산 여부
# 귀무 가설 : 두 집단은 등분산이다.
# 대립 가설 : 두 집단은 등분산이 아니다.
var.test(extra ~ group, data=sleep)
mean(sleep$extra[sleep$group==1])
mean(sleep$extra[sleep$group==2])
t.test(extra ~ group, data=sleep, alt="two.sided", var.equal=T, paired=T)
### ID를 제거하여 서로 다른 두 집단으로 테스트를 해보자.
sleep2 <- sleep[, -3]
sleep2
shapiro.test(sleep2$extra[sleep2$group==1])  # 정규분포와 같다
shapiro.test(sleep2$extra[sleep2$group==2])  # 정규분포와 같다
var.test(extra ~ group, data=sleep2)
t.test(extra ~ group, data=sleep2, alt="two.sided", var.equal=T, paired=T)
t.test(extra ~ group, data=sleep2, alt="two.sided", var.equal=T, paired=F)
### 그래프
before <- subset(sleep, group==1, extra)
before
after <- subset(sleep, group==2, extra)
after
install.packages("PairedData")
library(PairedData)
install.packages("gld")
library(PairedData)
paired(before, after)
ab <- paired(before, after)
ab
plot(ab, type="profile")
plot(ab, type="profile") + theme_bw()
ky <- read.csv("../data/KY.csv")
View(ky)
table(ky$group)
install.packages("pwr")
library(pwr)
mean.1 <- mean(ky$score[ky$group == 1])
mean.2 <- mean(ky$score[ky$group == 2])
cat(mean.1, mean.2)
sd.1 <- sd(ky$score[ky$group == 1])
sd.2 <- sd(ky$score[ky$group == 2])
cat(sd.1, sd.2)
effect_size <- abs(mean.1 - mean.2) / sqrt((sd.1^2 + sd.2^2) / 2)
# d에 들어갈 cohen의 공식은 두 집단의 평균차이를 표준편차로 나눈 값값
pwr.t.test(d=effect_size, type="two.sample", alt="two.sided", power=0.8, sig.level=0.05)
mydata <- read.csv("../data/independent.csv")
View(mydata)
t.test(birth_rate ~ cities, data=mydata, alt="two.sided", var.equal=T)
t.test(birth_rate ~ dummy, data=mydata, alt="two.sided", var.equal=T)
gun.mean = with(mydata, mean(birth_rate[dummy == 0]))
si.mean = with(mydata, mean(birth_rate[dummy == 1]))
cat(gun.mean, si.mean)
with(mydata, shapiro.test(birth_rate[dummy == 0]))
with(mydata, shapiro.test(birth_rate[dummy == 1]))
wilcox.test(birth_rate ~ dummy, data=mydata)
t.test(birth_rate ~ dummy, data=mydata, alt="two.sided", var.equal=T)
wilcox.test(birth_rate ~ dummy, data=mydata)
# 등분산 테스트
var.test(birth_rate ~ dummy, data=mydata)
# 등분산이 아니므로 welch's test
t.test(birth_rate ~ dummy, data=mydata, alt="two_sided", var.equal=F)
# 등분산이 아니므로 welch's test
t.test(birth_rate ~ dummy, data=mydata, alt="two.sided", var.equal=F)
str(mtcars)
head(mtcars)
auto.mean = with(mtcars, mean(mpg[am == 0]))
manual.mean = with(mtcars, mean(mpg[am == 1]))
cat(auto.mean, manual.mean)
# 정규분포 여부를 확인하기
with(mtcars, shapiro.test(mpg[am == 0]))
with(mtcars, shapiro.test(mpg[am == 1]))
# 정규분포 여부를 확인하기기 ( 정규분포가 해당이 되야 등분산 테스트가 필요한 것 )
with(mydata, shapiro.test(birth_rate[dummy == 0]))  # 정규분포가 아니다.
# 등분산 테스트
var.test(mpg ~ am, data=mtcars)
t.test(mpg ~ am, data=mtcars, alt="two.sided", var.equal=T)
